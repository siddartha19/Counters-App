{"version":3,"sources":["components/counter.jsx","components/counters.jsx","components/navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Counter","styles","padding","fontSize","fontWeight","this","props","counter","onIncrement","onDecrement","onDelete","id","style","className","getBadgeClass","formatCounter","onClick","classname","value","Component","Counters","OnReset","counters","map","key","NavBar","totalCounters","App","state","handleReset","setState","handleIncrement","index","indexOf","handleDecrement","handleDelete","counter_id","filter","c","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4beb8389.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  styles = {\n    padding: \"10px\",\n    fontSize: \"15px\",\n    fontWeight: \"bold\",\n  };\n\n  // constructor() {\n  //   super();\n  //   this.handleIncrement = this.handleIncrement.bind(this);\n  // }\n\n  render() {\n    const { counter, onIncrement, onDecrement, onDelete } = this.props;\n    return (\n      <div>\n        <h3>Counter #{counter.id}</h3>\n        <span style={this.styles} className={this.getBadgeClass()}>\n          {this.formatCounter()}\n        </span>\n        <button\n          onClick={() => onIncrement(counter)}\n          style={this.styles}\n          className=\"btn btn-primary m-2 btn-sm\"\n        >\n          Increment\n        </button>\n        <button\n          onClick={() => onDecrement(counter)}\n          style={this.styles}\n          className=\"btn btn-secondary m-2 btn-sm\"\n        >\n          Decrement\n        </button>\n        <button\n          onClick={() => onDelete(counter.id)}\n          style={this.styles}\n          className=\"btn btn-danger m-2 btn-sm\"\n        >\n          Delete\n        </button>\n      </div>\n    );\n  }\n\n  getBadgeClass() {\n    let classname = \"badge m-2 badge-\";\n    classname += this.props.counter.value === 0 ? \"warning\" : \"success\";\n    return classname;\n  }\n\n  formatCounter() {\n    const { value } = this.props.counter;\n    return value === 0 ? \"Zero\" : value;\n  }\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\nimport Counter from \"./counter\";\n\nclass Counters extends Component {\n  styles = {\n    padding: \"10px\",\n    fontSize: \"15px\",\n    fontWeight: \"bold\",\n  };\n\n  render() {\n    const {\n      OnReset,\n      counters,\n      onDelete,\n      onIncrement,\n      onDecrement,\n    } = this.props;\n    return (\n      <div>\n        <button\n          style={this.styles}\n          className=\"btn btn-info m-2\"\n          onClick={OnReset}\n        >\n          Reset\n        </button>\n        {counters.map((counter) => (\n          <Counter\n            key={counter.id}\n            counter={counter}\n            onDelete={onDelete}\n            onIncrement={onIncrement}\n            onDecrement={onDecrement}\n          ></Counter>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Counters;\n","import React, { Component } from \"react\";\n\nclass NavBar extends Component {\n  styles = {\n    fontWeight: \"bold\",\n  };\n  render() {\n    const { totalCounters } = this.props;\n    return (\n      <div>\n        <nav className=\"navbar navbar-light bg-light\">\n          <span style={this.styles} className=\"navbar-brand mb-0 h1\">\n            Counters\n            <span className=\"badge badge-pill badge-dark m-2\">\n              {totalCounters}\n            </span>\n          </span>\n        </nav>\n      </div>\n    );\n  }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Counters from \"./components/counters\";\nimport NavBar from \"./components/navbar\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 1 },\n      { id: 2, value: 2 },\n      { id: 3, value: 3 },\n      { id: 4, value: 4 },\n    ],\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter((c) => c.value > 0).length}\n        />\n        <main className=\"container p-2\">\n          <Counters\n            counters={this.state.counters}\n            OnReset={this.handleReset}\n            onDelete={this.handleDelete}\n            onIncrement={this.handleIncrement}\n            onDecrement={this.handleDecrement}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n\n  handleReset = () => {\n    const counters = this.state.counters.map((counter) => {\n      counter.value = 0;\n      return counter;\n    });\n    this.setState({ counters });\n  };\n\n  handleIncrement = (counter) => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value += 1;\n    this.setState({ counters });\n  };\n\n  handleDecrement = (counter) => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    if (counters[index].value !== 0) counters[index].value -= 1;\n    this.setState({ counters });\n  };\n\n  handleDelete = (counter_id) => {\n    const counters = this.state.counters.filter((c) => c.id !== counter_id);\n    this.setState({ counters: counters });\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}